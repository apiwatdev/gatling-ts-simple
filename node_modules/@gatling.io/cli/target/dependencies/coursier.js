"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveRecorderDependencies = exports.resolveGatlingJsDependencies = exports.installCoursier = void 0;
const fs_1 = require("fs");
const promises_1 = __importDefault(require("fs/promises"));
const download_1 = require("./download");
const log_1 = require("../log");
const versions_1 = require("./versions");
const util_1 = require("util");
const child_process_1 = require("child_process");
const os_1 = require("./os");
const installCoursier = async (gatlingHomeDir, downloadDir) => {
    const coursierRootPath = `${gatlingHomeDir}/coursier/${versions_1.versions.coursier}`;
    const coursierPath = `${coursierRootPath}/cs`;
    if (!(0, fs_1.existsSync)(coursierPath)) {
        const jarUrl = `https://github.com/coursier/coursier/releases/download/v${versions_1.versions.coursier}/coursier`;
        const windowsBatUrl = `https://github.com/coursier/launchers/raw/master/coursier.bat`;
        const downloadPath = `${downloadDir}/cs`;
        if ((0, fs_1.existsSync)(coursierRootPath)) {
            await promises_1.default.rm(coursierRootPath, { recursive: true });
        }
        if ((0, fs_1.existsSync)(downloadPath)) {
            await promises_1.default.rm(downloadPath);
        }
        await promises_1.default.mkdir(coursierRootPath, { recursive: true });
        log_1.logger.info(`Downloading Coursier ${versions_1.versions.coursier} to ${downloadPath}`);
        await (0, download_1.downloadFile)(jarUrl, downloadPath);
        if (os_1.osType === "Windows_NT") {
            await (0, download_1.downloadFile)(windowsBatUrl, `${downloadPath}.bat`);
        }
        else {
            await promises_1.default.chmod(downloadPath, 0o744);
        }
        log_1.logger.info(`Installing Coursier to ${coursierPath}`);
        await promises_1.default.rename(downloadPath, coursierPath);
        if (os_1.osType === "Windows_NT") {
            await promises_1.default.rename(`${downloadPath}.bat`, `${coursierPath}.bat`);
        }
    }
    else {
        log_1.logger.info(`Coursier ${versions_1.versions.coursier} already installed at ${coursierPath}`);
    }
    return coursierPath;
};
exports.installCoursier = installCoursier;
const resolveGatlingJsDependencies = async (coursierPath, javaHome, postmanVersion) => {
    const dependencies = [
        `"io.gatling.highcharts:gatling-charts-highcharts:${versions_1.versions.gatling.core}"`,
        `"io.gatling:gatling-jvm-to-js-adapter:${versions_1.versions.gatling.jsAdapter}"`,
        `"io.gatling:gatling-enterprise-plugin-commons:${versions_1.versions.gatling.enterprisePluginCommons}"`,
        `"org.graalvm.polyglot:js-community:${versions_1.versions.graalvm.js}"`
    ];
    if (postmanVersion !== undefined) {
        dependencies.push(`"io.gatling:gatling-postman-jvm-to-js-adapter:${postmanVersion}"`);
    }
    return await resolveDependencies(coursierPath, javaHome, ...dependencies);
};
exports.resolveGatlingJsDependencies = resolveGatlingJsDependencies;
const resolveRecorderDependencies = async (coursierPath, javaHome) => {
    const recorderDep = `io.gatling:gatling-recorder:${versions_1.versions.gatling.core}`;
    return await resolveDependencies(coursierPath, javaHome, recorderDep);
};
exports.resolveRecorderDependencies = resolveRecorderDependencies;
const resolveDependencies = async (coursierPath, javaHome, ...dependencies) => {
    const command = `"${coursierPath}" fetch --classpath ${dependencies.join(" ")}`;
    // TODO could add a timeout
    log_1.logger.info(`Resolving dependencies with Coursier`);
    const { stdout } = await execAsync(command, { env: { ...process.env, JAVA_HOME: javaHome } });
    return stdout;
};
const execAsync = (0, util_1.promisify)(child_process_1.exec);
