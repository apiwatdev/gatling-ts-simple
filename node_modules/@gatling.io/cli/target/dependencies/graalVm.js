"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installGraalVm = void 0;
const fs_1 = require("fs");
const promises_1 = __importDefault(require("fs/promises"));
const decompress_1 = __importDefault(require("decompress"));
const download_1 = require("./download");
const log_1 = require("../log");
const os_1 = require("./os");
const versions_1 = require("./versions");
const installGraalVm = async (gatlingHomeDir, downloadDir) => {
    const { os, arch, extension, homePath, binPath } = graalVmPlatformParams();
    const graalvmRootPath = `${gatlingHomeDir}/graalvm/${versions_1.versions.graalvm.jdk}`;
    const graalvmHomePath = `${graalvmRootPath}${homePath}`;
    const graalvmJavaPath = `${graalvmHomePath}${binPath}`;
    if (!(0, fs_1.existsSync)(graalvmJavaPath)) {
        const url = `https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${versions_1.versions.graalvm.jdk}/graalvm-community-jdk-${versions_1.versions.graalvm.jdk}_${os}-${arch}_bin.${extension}`;
        const downloadPath = `${downloadDir}/graalvm.${extension}`;
        if ((0, fs_1.existsSync)(graalvmRootPath)) {
            await promises_1.default.rm(graalvmRootPath, { recursive: true });
        }
        if ((0, fs_1.existsSync)(downloadPath)) {
            await promises_1.default.rm(downloadPath);
        }
        await promises_1.default.mkdir(graalvmRootPath, { recursive: true });
        log_1.logger.info(`Downloading GraalVM Community Edition ${versions_1.versions.graalvm.jdk} to ${downloadPath}`);
        await (0, download_1.downloadFile)(url, downloadPath);
        log_1.logger.info(`Unpacking GraalVM to ${graalvmRootPath}`);
        await (0, decompress_1.default)(downloadPath, graalvmRootPath, {
            map: (file) => {
                // Remove first level of file name, because it already contains a root directory
                file.path = file.path.split("/").slice(1).join("/");
                return file;
            }
        });
        await promises_1.default.rm(downloadPath);
    }
    else {
        log_1.logger.info(`GraalVM Community Edition ${versions_1.versions.graalvm.jdk} already installed at ${graalvmRootPath}`);
    }
    return graalvmHomePath;
};
exports.installGraalVm = installGraalVm;
const graalVmPlatformParams = () => {
    if (os_1.osType === "Linux") {
        const os = "linux";
        const extension = "tar.gz";
        const homePath = "";
        const binPath = "/bin/java";
        if (os_1.osArch === "x64") {
            return { os, arch: "x64", extension, homePath, binPath };
        }
        else if (os_1.osArch === "arm64") {
            return { os, arch: "aarch64", extension, homePath, binPath };
        }
    }
    else if (os_1.osType === "Darwin") {
        const os = "macos";
        const extension = "tar.gz";
        const homePath = "/Contents/Home";
        const binPath = "/bin/java";
        if (os_1.osArch === "x64") {
            return { os, arch: "x64", extension, homePath, binPath };
        }
        else if (os_1.osArch === "arm64") {
            return { os, arch: "aarch64", extension, homePath, binPath };
        }
    }
    else if (os_1.osType === "Windows_NT" && os_1.osArch === "x64") {
        return { os: "windows", arch: "x64", extension: "zip", homePath: "", binPath: "/bin/java.exe" };
    }
    throw Error(`Operating system type '${os_1.osType}' with architecture '${os_1.osArch}' is not currently supported.`);
};
